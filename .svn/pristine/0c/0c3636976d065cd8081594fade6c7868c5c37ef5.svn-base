package com.iptv.mktech.iptv;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.iptv.mktech.iptv.entiy.Channel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL".
*/
public class ChannelDao extends AbstractDao<Channel, Long> {

    public static final String TABLENAME = "CHANNEL";

    /**
     * Properties of entity Channel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cid = new Property(0, Long.class, "cid", true, "_id");
        public final static Property Stream_name = new Property(1, String.class, "stream_name", false, "STREAM_NAME");
        public final static Property Stream_url = new Property(2, String.class, "stream_url", false, "STREAM_URL");
        public final static Property IsFav = new Property(3, boolean.class, "isFav", false, "IS_FAV");
        public final static Property PackageId = new Property(4, Long.class, "packageId", false, "PACKAGE_ID");
    }

    private Query<Channel> package_ChannelsQuery;

    public ChannelDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cid
                "\"STREAM_NAME\" TEXT," + // 1: stream_name
                "\"STREAM_URL\" TEXT NOT NULL ," + // 2: stream_url
                "\"IS_FAV\" INTEGER NOT NULL ," + // 3: isFav
                "\"PACKAGE_ID\" INTEGER);"); // 4: packageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Channel entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
 
        String stream_name = entity.getStream_name();
        if (stream_name != null) {
            stmt.bindString(2, stream_name);
        }
        stmt.bindString(3, entity.getStream_url());
        stmt.bindLong(4, entity.getIsFav() ? 1L: 0L);
 
        Long packageId = entity.getPackageId();
        if (packageId != null) {
            stmt.bindLong(5, packageId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Channel entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
 
        String stream_name = entity.getStream_name();
        if (stream_name != null) {
            stmt.bindString(2, stream_name);
        }
        stmt.bindString(3, entity.getStream_url());
        stmt.bindLong(4, entity.getIsFav() ? 1L: 0L);
 
        Long packageId = entity.getPackageId();
        if (packageId != null) {
            stmt.bindLong(5, packageId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Channel readEntity(Cursor cursor, int offset) {
        Channel entity = new Channel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stream_name
            cursor.getString(offset + 2), // stream_url
            cursor.getShort(offset + 3) != 0, // isFav
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // packageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Channel entity, int offset) {
        entity.setCid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStream_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStream_url(cursor.getString(offset + 2));
        entity.setIsFav(cursor.getShort(offset + 3) != 0);
        entity.setPackageId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Channel entity, long rowId) {
        entity.setCid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Channel entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Channel entity) {
        return entity.getCid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "channels" to-many relationship of Package. */
    public List<Channel> _queryPackage_Channels(Long packageId) {
        synchronized (this) {
            if (package_ChannelsQuery == null) {
                QueryBuilder<Channel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PackageId.eq(null));
                package_ChannelsQuery = queryBuilder.build();
            }
        }
        Query<Channel> query = package_ChannelsQuery.forCurrentThread();
        query.setParameter(0, packageId);
        return query.list();
    }

}
