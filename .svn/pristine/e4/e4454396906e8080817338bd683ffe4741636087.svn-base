package com.iptv.mktech.iptv;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iptv.mktech.iptv.entiy.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Void> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, int.class, "status", false, "STATUS");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Osd = new Property(2, String.class, "osd", false, "OSD");
        public final static Property Expire = new Property(3, String.class, "expire", false, "EXPIRE");
        public final static Property User_agent = new Property(4, String.class, "user_agent", false, "USER_AGENT");
    }


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"STATUS\" INTEGER NOT NULL ," + // 0: status
                "\"MESSAGE\" TEXT," + // 1: message
                "\"OSD\" TEXT," + // 2: osd
                "\"EXPIRE\" TEXT," + // 3: expire
                "\"USER_AGENT\" TEXT);"); // 4: user_agent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
 
        String osd = entity.getOsd();
        if (osd != null) {
            stmt.bindString(3, osd);
        }
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(4, expire);
        }
 
        String user_agent = entity.getUser_agent();
        if (user_agent != null) {
            stmt.bindString(5, user_agent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStatus());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
 
        String osd = entity.getOsd();
        if (osd != null) {
            stmt.bindString(3, osd);
        }
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(4, expire);
        }
 
        String user_agent = entity.getUser_agent();
        if (user_agent != null) {
            stmt.bindString(5, user_agent);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.getInt(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // osd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expire
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // user_agent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setStatus(cursor.getInt(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOsd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpire(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_agent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Account entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Account entity) {
        return null;
    }

    @Override
    public boolean hasKey(Account entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
