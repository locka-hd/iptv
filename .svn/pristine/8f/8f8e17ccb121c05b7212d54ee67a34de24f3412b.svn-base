package com.iptv.mktech.iptv;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iptv.mktech.iptv.entiy.Package;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PACKAGE".
*/
public class PackageDao extends AbstractDao<Package, Long> {

    public static final String TABLENAME = "PACKAGE";

    /**
     * Properties of entity Package.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Category_name = new Property(2, String.class, "category_name", false, "CATEGORY_NAME");
        public final static Property Category_type = new Property(3, String.class, "category_type", false, "CATEGORY_TYPE");
    }

    private DaoSession daoSession;


    public PackageDao(DaoConfig config) {
        super(config);
    }
    
    public PackageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PACKAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"CATEGORY_NAME\" TEXT," + // 2: category_name
                "\"CATEGORY_TYPE\" TEXT);"); // 3: category_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PACKAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Package entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindLong(2, entity.getId());
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(3, category_name);
        }
 
        String category_type = entity.getCategory_type();
        if (category_type != null) {
            stmt.bindString(4, category_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Package entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindLong(2, entity.getId());
 
        String category_name = entity.getCategory_name();
        if (category_name != null) {
            stmt.bindString(3, category_name);
        }
 
        String category_type = entity.getCategory_type();
        if (category_type != null) {
            stmt.bindString(4, category_type);
        }
    }

    @Override
    protected final void attachEntity(Package entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Package readEntity(Cursor cursor, int offset) {
        Package entity = new Package( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // category_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // category_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Package entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setCategory_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Package entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Package entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Package entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
